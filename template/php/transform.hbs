{{!-- ****SERVICE SECTION**** --}}
{{regmap 'typephp' 'boolean:bool;integer,integer64:int;float:float;string:string;any:mixed;enums:int' ~}}
<?php
/*
* Generate info - version php: {{vars.ver}}
*/
{{!-- ****IMPORT SECTION**** --}}
namespace {{to-ns namespace '/' "\^" 'firstupper'}};

{{#each imports}}
{{#ifmodeltype type 'models' @root}}
use {{to-ns (impfileto-ns file) '/' "\^"  'firstupper'}}\\{{type}}Interface;
{{else}}
use {{to-ns (impfileto-ns file) '/' "\^"  'firstupper'}}\\{{type}};
{{/ifmodeltype}}
{{/each}}
{{!-- ****CONST SECTION**** --}}
{{#each consts}}
{{#if description}}
/**
 * {{{ description }}}
 */
{{/if}}
interface {{name}}
{
  {{#each items }}
  {{#if description}}
  /**
   * {{{ description }}}
   */
  {{/if}}
  const {{name}} = {{#val value "'"}}{{/val}};
  {{/each}}
}

{{/each}}
{{!-- ****ENUMS SECTION**** --}}
{{#each enums}}
{{#if description}}
/**
 * {{{ description }}}
 */
{{/if}}
interface {{name}}
{
  {{#each items }}
  {{#if description}}
  /**
   * @var int {{{ description }}}
   */
  {{/if}}
  const {{name}} = {{#val value "'"}}{{/val}};
  {{/each}}
}

{{/each}}
{{!-- ****MODEL SECTION**** --}}
{{#each models}}
/**
 * {{{ description }}}
{{#each items}}
 * @property {{map 'typephp' type}}{{#if array}}[]{{/if}} ${{name}} {{#ifn-required}}(optional) {{/ifn-required}}{{#ifmodeltype type 'enums' @root}}Use interface {{type}}. {{/ifmodeltype}}{{{ description }}}
{{/each}}
 */
interface {{ name }}Interface{{#if basetype}} extends {{basetype}}Interface {{/if}}
{
{{#if @root.vars.gen_prop_name}}
{{#each items}}
  const PN_{{name}} = '{{name}}';
{{/each}}
{{/if}}

}

class {{ name }} implements {{ name }}Interface
{
  public function __get($key)
  {
      return $this->$key;
  }

  public function __set($key, $value)
  {
      $this->$key = $value;
  }
}

{{/each}}
{{!-- ****CONTRACT SECTION**** --}}
{{#each contracts}}
{{#if description}}
/**
 * {{{ description }}}
 */
{{/if}}
interface {{ name }}{{#if basetype}} extends {{basetype}} {{/if}}
{
  {{#each methods}}
  /**
   * {{{ description }}}
   *
   {{#each args}}
   * @param {{map 'typephp' type}}{{#if array}}[]{{/if}} {{#if arrayparams}}...{{/if}}${{name}} {{description}}
   {{/each}}
   {{#if result}}* @return {{map 'typephp' result.type}}{{#if result.array}}[]{{/if}} {{result.description}}{{/if}}
   */
  function {{name}}({{#each args}}{{#if @index}}, {{/if}}{{#php7 @root.vars.ver}}{{#if array}}array{{else}}{{map 'typephp' type}}{{/if}} {{/php7}}{{#if arrayparams}}...{{/if}}${{name}}{{/each}}){{#resphp result @root.vars.ver}}: {{#if result.array}}array{{else}}{{map 'typephp' result.type}}{{/if}}{{/resphp}};
  {{/each}}
}
{{/each}}
