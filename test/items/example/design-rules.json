/*
  JSON allows comments. It will use single-line comments // and multi-line comments /* with whitespace
*/
{
  //Optional
  "$schema": "https://raw.githubusercontent.com/do5/mcgen/master/shemas/mcgen-shema.json",
  "imports": [
    {
      //Model where is the type.
      //The path is relative, no start '/' and without the extension '.json'. Delimiter '/'
      "file": "auth/auth-model",
      //The imported data type can only be a 'model' and used as a parameter or inheritance
      "type": "User"
    },
    {
      "file": "auth/auth-model",
      "type": "BaseTypeExt"
    }
  ],
  /*
Enumerators. As enum C#
Enumerator is not supported by all languages. If the enumerator does not support using constants
*/
  "enums": [
    {
      "name": "OnOff",
      "items": [
        {
          "name": "On",
          "description": "desc On value",
          "value": 1
        },
        {
          "name": "Off",
          "description": "desc Off value",
          "value": 0
        }
      ]
    }
  ],
  /*
  constants
  */
  "consts": [
    {
      "name": "ConstName",
      "description": "ConstName description",
      "items": [
        {
          "name": "valInteger",
          "type": "integer",
          "value": 12
        },
        {
          "name": "valBoolean",
          "type": "boolean",
          "value": true
        },
        {
          "name": "valInteger64",
          "type": "integer64",
          "value": 11111111111
        },
        {
          "name": "valFloat",
          "type": "float",
          "description": "desc val1",
          "value": 24.34
        },
        {
          "name": "valString",
          "type": "string",
          "description": "desc valString",
          "value": "body-string"
        }
      ]
    }
  ],
  "models": [
    {
      "name": "UserInfo",
      "basetype": "User",
      "items": [
        {
          "name": "Address",
          "type": "string"
        },
        {
          "name": "UsedEnum",
          "type": "OnOff"
        }
      ]
    }
  ],
  "contracts": [
    {
      "name": "BaseType",
      "methods": [
        {
          "name": "GetDataBase",
          "description": "desc GetDataBase",
          "result": {
            "type": "integer",
            "description": "result desc"
          }
        }
      ]
    },
    {
      "name": "MyContract",
      "basetype": "BaseType",
      "methods": [
        {
          "name": "GetData",
          "description": "desc getData",
          "result": {
            "type": "boolean",
            "description": "result desc"
          },
          "args": [
            {
              "name": "arg1",
              "type": "integer",
              "description": "arg1 desc"
            },
            {
              "name": "arg2",
              "type": "string",
              "description": "arg2 desc"
            }
          ]
        }
      ]
    },
    {
      "name": "MyContractExt",
      "basetype": "BaseTypeExt"
    }
  ]
}
